version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 
  kongadata:

networks:
  kong-net:
    driver: bridge

services:

  #################################
  # Client
  #################################


  #################################
  # Profile microservice (Simple)
  #################################
  profile:
    build:
      context: ./profile
      dockerfile: dockerfile
    image: mosengtim2021/profile:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/profile
      PYTHONUNBBUFFERED: 1
    ports:
      - "5003:5003"

  #################################
  # Checkout microservice
  #################################
  checkout:
    build:
      context: ./checkout
      dockerfile: dockerfile
    image: mosengtim2021/checkout:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/checkout
      PYTHONUNBBUFFERED: 1
    ports:
    - "4242:4242"

    #################################
  # Stripe API
  #################################
  stripe:
    build:
      context: ./stripe adapter
      dockerfile: dockerfile
    image: mosengtim2021/stripeapi:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/checkout
      PYTHONUNBBUFFERED: 1
    ports:
    - "4243:4243"



  #################################
  # Crop Management (Simple)
  #################################
  crop_management:
    build:
      context: ./CropManagement
      dockerfile: dockerfile
    image: mosengtim2021/crop_management:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/crop_management
      PYTHONUNBUFFERED: 1
    ports:
    - "5001:5001"


  ###############################################
  # Inventory (Simple)
  ###############################################
  inventory:
    build:
      context: ./inventory
      dockerfile: dockerfile
    image: mosengtim2021/inventory:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/inventory
      PYTHONUNBUFFERED: 1
    ports:
    - "5000:5000"

  ###############################################
  # Machine learning (Complex)
  ###############################################
  machine_learning:
    build: 
      context: ./MachineLearning
      dockerfile: dockerfile
    image: mosengtim2021/machine_learning:g1t1
    depends_on:
      - crop_management
    networks:
      - kong-net
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/machine_learning
      PYTHONUNBUFFERED: 1
    ports:
      - "5007:5007"

  ###############################################
  # Purchase Activity (Complex)
  ###############################################
  purchase_activity:
    build:
      context: ./PurchaseActivity
      dockerfile: dockerfile
    image: mosengtim2021/purchase_activity:g1t1
    restart: always
    depends_on:
      - rabbitmq
      - delivery
    networks:
        - kong-net
    environment: 
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/purchase_activity
      
      PYTHONUNBUFFERED: 1
    ports:
    - "5006:5006"


  ###############################################
  # Inventory Manager (Complex)
  ###############################################
  inventory_manager:
    build:
      context: ./InventoryManager
      dockerfile: dockerfile
    image: mosengtim2021/inventory_manager:g1t1
    restart: always
    networks:
        - kong-net
    depends_on:
      - inventory
      - purchase_activity
    environment:
      inventory_URL: http://inventory:5000/inventory
      purchase_activity_URL: http://purchase_activity:5006/purchase_activity
      PYTHONUNBUFFERED: 1
    ports:
    - "5010:5010"

  ###############################################
  # Twilio 
  ###############################################
  twilio_sms:
    build:
      context: ./twilio_sms
      dockerfile: dockerfile
    image: mosengtim2021/twilio_sms:g1t1
    restart: always
    networks:
        - kong-net
    environment:
      PYTHONUNBUFFERED: 1
    ports:
     - "5004:5004"


  ###############################################
  # Delivery
  ###############################################
  delivery:
    build:
      context: ./delivery
      dockerfile: dockerfile
    image: mosengtim2021/delivery:g1t1
    restart: always
    depends_on:
      - rabbitmq
    networks:
        - kong-net
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:3306/deliveries
      delivery_url: http://inventory:5008/delivery
      PYTHONUNBUFFERED: 1
    ports:
      - "5008:5008"

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
        - kong-net


  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata